{"version":3,"sources":["interfaces/Activity.ts","interfaces/Organization.ts","components/ActivityType.tsx","components/OrganizationType.tsx","components/CircleTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Activity","Organization","ActivityType","props","type","Art","react_default","a","createElement","TableCell","Athletic","Cultural","OrganizationType","Certificated","Uncetificated","Unrecognized","CircleTable","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getJSON","state","data","fetch","then","r","json","result","setState","Table","TableHead","TableRow","TableBody","map","v","key","name","activityType","organizationType","description","tags","tag","Chip","label","React","Component","App","className","CircleTable_CircleTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kLAAYA,mMAKGA,ICLHC,EDKGD,YEEAE,EAAA,SAACC,GACd,OAAQA,EAAMC,MACZ,KAAKJ,EAASK,IACZ,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,2BACT,KAAKT,EAASU,SACZ,OAAOJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,2BACT,KAAKT,EAASW,SACZ,OAAOL,EAAAC,EAAAC,cAACC,EAAA,EAAD,2BACT,QACE,OAAOH,EAAAC,EAAAC,cAACC,EAAA,EAAD,iCDhBDR,4GAMGA,QECAW,EAAA,SAACT,GACd,OAAQA,EAAMC,MACZ,KAAKH,EAAaY,aAChB,OAAOP,EAAAC,EAAAC,cAACC,EAAA,EAAD,6CACT,KAAKR,EAAaa,cAChB,OAAOR,EAAAC,EAAAC,cAACC,EAAA,EAAD,6CACT,KAAKR,EAAac,aAChB,OAAOT,EAAAC,EAAAC,cAACC,EAAA,EAAD,2BACT,QACE,OAAOH,EAAAC,EAAAC,cAACC,EAAA,EAAD,+DCAQO,cAEnB,SAAAA,EAAYb,GAAY,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACtBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KACDqB,UACLP,EAAKQ,MAAQ,CACXC,KAAM,IAJcT,uMASSU,MAAM,eAAeC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,gBAA1DC,SACNX,KAAKY,SAAS,CACZN,KAAMK,uIAMR,OAAOzB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACL3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAACC,EAAA,EAAD,qBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,iCACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,iCACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,qBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,uBAGJH,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACGhB,KAAKK,MAAMC,KAAKW,IAAI,SAACC,GAAD,OACnBhC,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAUI,IAAKD,EAAEE,MACflC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAY6B,EAAEE,MACdlC,EAAAC,EAAAC,cAACN,EAAD,CAAcE,KAAMkC,EAAEG,eACtBnC,EAAAC,EAAAC,cAACI,EAAD,CAAkBR,KAAMkC,EAAEI,mBAC1BpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAY6B,EAAEK,aACdrC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAY6B,EAAEM,KAAKP,IAAI,SAACQ,GAAD,OACrBvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMC,MAAOF,mBArCcG,IAAMC,WCDhCC,EARO,WACpB,OACE5C,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,OACb7C,EAAAC,EAAAC,cAAC4C,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.a15611b8.chunk.js","sourcesContent":["export enum Activity {\n  Art = \"art\",\n  Athletic = \"athletic\",\n  Cultural = \"cultural\"\n}\nexport default Activity\n","export enum Organization {\n  Certificated = \"certificated\",\n  Uncetificated = \"uncertificated\",\n  Unrecognized = \"unrecognized\"\n}\n\nexport default Organization\n","import React from 'react';\nimport Activity from '../interfaces/Activity'\nimport TableCell from '@material-ui/core/TableCell';\n\ninterface Props {\n  type: Activity\n};\nexport default (props: Props) => {\n  switch (props.type) {\n    case Activity.Art:\n      return <TableCell>芸術系</TableCell>\n    case Activity.Athletic:\n      return <TableCell>体育系</TableCell>\n    case Activity.Cultural:\n      return <TableCell>文化系</TableCell>\n    default:\n      return <TableCell>不明</TableCell>\n  }\n}\n","import React from 'react';\nimport Organization from '../interfaces/Organization'\nimport TableCell from '@material-ui/core/TableCell';\n\ninterface Props {\n  type: Organization\n};\nexport default (props: Props) => {\n  switch (props.type) {\n    case Organization.Certificated:\n      return <TableCell>課外活動団体</TableCell>\n    case Organization.Uncetificated:\n      return <TableCell>一般学生団体</TableCell>\n    case Organization.Unrecognized:\n      return <TableCell>その他</TableCell>\n    default:\n      return <TableCell>不明</TableCell>\n  }\n}\n","import React from 'react';\nimport Circle from '../interfaces/Circle';\nimport ActivityType from './ActivityType'\nimport OrganizationType from './OrganizationType'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Chip from '@material-ui/core/Chip';\ninterface Props {\n\n}\ninterface State {\n  data: Circle[]\n}\nexport default class CircleTable extends React.Component<Props, State> {\n\n  constructor(props: any) {\n    super(props)\n    this.getJSON()\n    this.state = {\n      data: []\n    }\n  }\n\n  async getJSON() {\n    const result: Circle[] = await fetch(\"./data.json\").then(r => r.json())\n    this.setState({\n      data: result\n    })\n\n  }\n\n  render() {\n    return <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>名前</TableCell>\n          <TableCell>活動種別</TableCell>\n          <TableCell>団体種別</TableCell>\n          <TableCell>説明</TableCell>\n          <TableCell>タグ</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {this.state.data.map((v: Circle) => (\n          <TableRow key={v.name}>\n            <TableCell>{v.name}</TableCell>\n            <ActivityType type={v.activityType} />\n            <OrganizationType type={v.organizationType} />\n            <TableCell>{v.description}</TableCell>\n            <TableCell>{v.tags.map((tag: string) => (\n              <Chip label={tag} />\n            ))}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  }\n\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\n\nimport CircleTable from './components/CircleTable'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CircleTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}